{	GraphOps2 	Implementation of GraphOps

	DESCRIPTION
		Implementation of GraphOps.p
		
	AUTHOR
		Ken Friedenbach
		Copyright 1980-1988
		All Rights reserved.
	
	BUGS
}

CONST ListItemChunkSize = 100;

procedure GOEngineError (message: str255; errorNum, format: integer);
	EXTERNAL;

{$S GraphOps}
{$IFC qTrace}{$D++}{$ENDC}
procedure GraphError (s: Str255);
	begin
		KoncatCst (@s, ', in GraphOps Unit.');
		GOEngineError (s, 0, 0);
	end; {GraphError}

{ Implementation only procedures }
procedure CallMore (WhichGraph: p2Graph; nodSize: integer; p: ProcPtr); EXTERNAL; {in GOAsm.a}


{ Interface procedures }
	
procedure InitGraph (g:p2Graph;
					Lev: TGraphLevel; 
					HiG, LowG: p2Graph;
					CmpHi, CmpNew: ProcPtr;
					MoreN, MoreA: ProcPtr);
	{ Called once during initial allocation. Sets all fields to initial values. }
	{ NOTE: no allocation is done, so a DisposeGraph procedure is not needed. }
	begin
		{$IFC TraceInit }
			DebugStr ('Entering InitGraph.');
		{$ENDC}
		with g^ do
			begin
				InitNode := nil;
				GraphLevel := Lev;
				HighGraph := HiG;
				LowGraph := LowG;
				ComputeHigh := CmpHi;
				ComputeNew := CmpNew;
				AvailNodes := nil;
				NodeChunckList := nil;
				MoreNodes := MoreN;
				AvailArcs := nil;
				ArcChunckList := nil;
				MoreArcs := MoreA;
				AvailMoveTreeNodes := nil;
				AvailMoveTreeChunckList := nil;
				AvailListItems := nil;
				ListItemsChunkList := nil;
				AvailAnalyses := nil;
				AnalysesChunkList := nil;
				ChangeList := nil;
			end;
		{$IFC TraceInit }
			DebugStr ('Leaving InitGraph.');
		{$ENDC}
	end; {InitGraph}

procedure ClearGraph (g:p2Graph);
	{ Dispose of releated chunks of memory, and clear. }
	{ NOTE: this routine summarizes conventions about static and dynamic values. }
	begin
		{$IFC TraceInit }
			DebugStr ('Entering ClearGraph.');
		{$ENDC}
		with g^ do
			begin
				InitNode := nil; (* set back *)
				(* GraphLevel := Lev; constant *)
				(* HighGraph := HiG; constant *)
				(* LowGraph := LowG; constant *)
				(* ComputeHigh := CmpHi; constant *)
				(* ComputeNew := CmpNew; constant *)
				AvailNodes := nil; (* set back *)
				DisposeChunks (NodeChunckList); (* set back to nil *)
				(* MoreNodes := MoreN; constant *)
				AvailArcs := nil; (* set back *)
				DisposeChunks (ArcChunckList); (* set back to nil *)
				(* MoreArcs := MoreA; constant *)
				AvailMoveTreeNodes := nil; (* set back *)
				DisposeChunks (AvailMoveTreeChunckList); (* set back to nil *)
				AvailListItems := nil; (* set back *)
				DisposeChunks (ListItemsChunkList); (* set back to nil *)
				AvailAnalyses := nil;
				DisposeChunks (AnalysesChunkList); (* set back to nil *)
				ChangeList := nil; (* set back *)
			end;
		{$IFC TraceInit }
			DebugStr ('Leaving ClearGraph.');
		{$ENDC}
	end; {ClearGraph}

{$IFC qTrace}{$D+}{$ENDC}
procedure AddElement (part: p2Node; e: p2Node);
{ Add an element to a partition }
	begin
			{ for now, a simple linked stack, nil terminated }
		e^.Parent := part;
		e^.Sibling := part^.Child;
		part^.Child := e;
	end; {AddElement}
	
procedure DeleteElement (part: p2Node; e: p2Node);
{ Delete an element from a partition }
	var tmpE, prevE: p2Node;
	begin
		tmpE := part^.Child;
		if tmpE = e then
			part^.Child := tmpE^.Sibling
		else
			begin
				while tmpE <> e do
					begin
						prevE := tmpE;
						tmpE := tmpE^.Sibling;
						if tmpE = nil then
							GraphError ('DeleteElement: element not found'); 
					end;
				prevE^.Sibling := tmpE^.Sibling;
			end;
	end; {DeleteElement}

function NumElements (part: p2Node): integer;
{ counts the number of elements in a partition }
	var n: integer; e: p2Node;
	begin
		n := 0;
		e := part^.Child;
		while e <> nil do
			begin
				n := n+1;
				e := e^.Sibling;
			end;
		NumElements := n;
	end; {NumElements}

procedure EachElement (part: p2Node; procedure Visit (p2: p2Node));
	{ Visits each member of a partition. }
	{ "Looks" ahead on list, so visited element can be deleted. }
	var e, nextE: p2Node;
	begin
		e := part^.Child;
		while e <> nil do
			begin
				nextE := e^.Sibling;
				Visit (e);
				e := nextE;
			end;
	end; {EachElement}
	
function AddEdge (g: p2Graph; fromN, toN: p2Node): p2Arc;
{ Add an undirected edge between two nodes }
	var a: p2Arc; temp: p2Node;
	begin
		if ord4(fromN) >ord4(toN) then
			begin 
				temp := toN;
				toN := fromN;
				fromN := temp;
			end;
		with g^ do
			begin
				if AvailArcs = nil then
					CallMore(g, sizeof (TArc), MoreArcs);
				a := AvailArcs;
				AvailArcs := a^.InNext;
			end;
		with a^ do
			begin
				FromNode := fromN;
				ToNode := toN;
				{ Default values: higher level fields }
				ImageCount := 1;
			end;
		{AddToInList}
		{ for now: simple linked stack, nil terminated }
		a^.InNext := toN^.InList;
		toN^.InList := a;
		{AddToOutList}
		{ for now: simple linked stack, nil terminated }
		a^.OutNext := fromN^.OutList;
		fromN^.OutList := a;
		
		{$IFC doArcListCounts}
		{ update edge counts }
		with toN^ do InSize := InSize+1;
		with fromN^ do OutSize := OutSize+1;
		{$ENDC}	
		
		AddEdge := a;
	end; {AddEdge}
	
function AddNode (g: p2Graph; lo: integer): p2Node;
{ Add an isolated node }
	var n: p2Node;
	begin
		with g^ do
			begin
				if AvailNodes = nil then
					CallMore (g, sizeof (TNode), MoreNodes);
				n := AvailNodes;
				AvailNodes := AvailNodes^.Parent;
			end;
		with n^ do
			begin
				Parent := nil;
				Sibling := nil;
				HighState := 0;
				Marked := False;
				{$IFC doArcListCounts}
				InSize := 0;
				OutSize := 0;
				{$ENDC}	
				InList := nil;
				OutList := nil;
				Child := nil;
				LowState := lo;
				{$IFC DebugDraw}
				TheCenter := nil;
				{$ENDC}
			end;
		AddNode := n;
	end; {AddNode}
	
procedure DelEdge (g: p2Graph; fromN, toN: p2Node);
{ Delete the arc, a.  }
	var tmpA, prevA: p2Arc; a: p2Arc; temp: p2Node;
	begin
		if ord4(fromN) >ord4(toN) then
			begin 
				temp := toN;
				toN := fromN;
				fromN := temp;
			end;
		 (* try to avoid: a := FindEdge (fromN, toN); *)
		{ DeleteInList: delete arc from InList of toN, set a }
		tmpA := toN^.InList;
		if tmpA^.FromNode = fromN then
			begin
				toN^.InList := tmpA^.InNext;
				a := tmpA;
			end
		else
			begin
				while tmpA^.FromNode <> fromN do
					begin
						prevA := tmpA;
						tmpA := tmpA^.InNext;
						if tmpA = nil then
							GraphError ('DeleteInList: arc not found'); 
					end;
				prevA^.InNext := tmpA^.InNext;
				a := tmpA;
			end;

		{ DeleteOutList: delete arc from OutList of fromN }
		tmpA := fromN^.OutList;
		if tmpA = a then
			fromN^.OutList := tmpA^.OutNext
		else
			begin
				while tmpA <> a do
					begin
						prevA := tmpA;
						tmpA := tmpA^.OutNext;
						if tmpA = nil then
							GraphError ('DeleteOutList: arc not found'); 
					end;
				prevA^.OutNext := tmpA^.OutNext;
			end;

		{ put edge on avail list }
		with g^ do
			begin
				with a^ do
					begin
						ImageCount := ChunkFreeNode;
						InNext := AvailArcs;
					end; 
				AvailArcs := a;
			end;
			
		{$IFC doArcListCounts}
		{ update edge counts }
		with toN^ do InSize := InSize-1;
		with fromN^ do OutSize := OutSize-1;
		{$ENDC}	
		
	end; {DelEdge}
	
procedure DelNod (g: p2Graph; n: p2Node);
{ Delete an isolated node }
	begin
		with n^ do
			begin
				if InList <> nil then
					GraphError ('DelNod: InList not empty');
				if OutList <> nil then
					GraphError ('DelNod: OutList not empty');
			end;
		with g^ do
			begin
				with n^ do
					begin
						Parent := AvailNodes;
						HighState := ChunkFreeNode;
					end;
				AvailNodes := n;
			end;
	end; {DelNod}
	
procedure EachAdjNode (n: p2Node; procedure Visit (n2: p2Node));
{ Visit each adjacent node to a given node }
	var a: p2Arc;
	begin
		with n^ do
			begin
				a := InList;
				while a <> nil do
					begin
						Visit (a^.FromNode);
						a := a^.InNext;
					end;
				a := OutList;
				while a <> nil do
					begin
						Visit (a^.ToNode);
						a := a^.OutNext;
					end;
			end;
	end; {EachAdjNode}

procedure EachIncidentArc (n: p2Node; procedure Visit (a: p2Arc));
{ Visit each incident arc to a given node }
	var a: p2Arc;
	begin
		with n^ do
			begin
				a := InList;
				while a <> nil do
					begin
						Visit (a);
						a := a^.InNext;
					end;
				a := OutList;
				while a <> nil do
					begin
						Visit (a);
						a := a^.OutNext;
					end;
			end;
	end; {EachIncidentArc}

function FindEdge (fromN, toN: p2Node): p2Arc;
	{ Find the undirected edge between fromN and toN. Return nil if none. }
	label 99;
	var foundA, A2: p2Arc; temp: p2Node;		
		{$IFC doFindEdgeStats}
		cnt: integer;
		{$ENDC}	
	begin
		{$IFC doFindEdgeStats}
		cnt := 0;
		{$ENDC}	
		if ord4(fromN) >ord4(toN) then
			begin 
				temp := toN;
				toN := fromN;
				fromN := temp;
			end;
		foundA := nil;
		A2 := toN^.InList;
		if A2 <> nil then
			begin
				foundA := fromN^.OutList;
				if foundA <> nil then
					if foundA^.ToNode = toN then
						goto 99
					else
						{$IFC doArcListCounts}
						{ check sizes and search shorter list }
						if toN^.InSize < fromN^.OutSize then
							begin
								foundA := A2;
								repeat
									{$IFC doFindEdgeStats}
									cnt := cnt+1;
									{$ENDC}	
									if foundA^.FromNode = fromN then
										goto 99
									else
										foundA := foundA^.InNext
								until foundA = nil;
							end
						else
						{$ENDC}	
							begin
								repeat
									{$IFC doFindEdgeStats}
									cnt := cnt+1;
									{$ENDC}	
									if foundA^.ToNode = toN then
										goto 99
									else
										foundA := foundA^.OutNext
								until foundA = nil;
							end;
			end;
99:
		{$IFC doFindEdgeStats}
		if cnt > 19 then
			FindEdgeStats [20] := FindEdgeStats [20]+1
		else
			FindEdgeStats [cnt] := FindEdgeStats [cnt]+1;
		{$ENDC}	
		FindEdge := foundA;
	end; {FindEdge}
	
{$IFC qTrace}{$D++}{$ENDC}
procedure DisposeChunks (var AList: ChunkList);
	var pChunk: ChunkList;
	begin
		{$IFC TraceInit }
			DebugStr ('Entering DisposeChunks.');
		{$ENDC}
		while AList <> nil do
			begin
				pChunk := AList^.nextChunk;
				DisposPtr (Ptr(AList));
				AList := pChunk;
			end;
		{$IFC TraceInit }
		DebugStr ('Leaving DisposeChunks.');
		{$ENDC}
	end; {DisposeChunks}

{$IFC qTrace}{$D+}{$ENDC}
procedure MoreListItems (g: p2Graph);
	var pChunk: ChunkList; p: p2ListItem; i: integer;
	begin
		pChunk := ChunkList (NewPtr (4 + ListItemChunkSize * sizeof (TListItem)));
		if pChunk = nil then
			GraphError('Memory Full');
		pChunk^.nextChunk := g^.ListItemsChunkList;
		g^.ListItemsChunkList := pChunk;
		p := p2ListItem (ord4 (pChunk) + 4);
		for i := 1 to ListItemChunkSize do
			begin
				p^.NextListItem := g^.AvailListItems;
				g^.AvailListItems := p;
				p := Pointer (ord4(p) + sizeof (TListItem));
			end;
	end; {MoreListItems}

procedure ReturnToAvailList (g: p2Graph; var list: p2ListItem);
{ called to return the storage used for a stack or list }
	var nextP: p2ListItem;
	begin
		while list <> nil do
			begin
				nextP := list^.NextListItem;
				list^.NextListItem := g^.AvailListItems;
				g^.AvailListItems := list;
				list := nextP;
			end;
	end; {ReturnToAvailList}
	
function StackSize (list: p2ListItem): integer;
{ returns the number of elements on a stack or list }
	var n: integer;
	begin
		n := 0;
		while list <> nil do
			begin
				n := n+1;
				list := list^.NextListItem;
			end;
		StackSize := n;
	end; {StackSize}

procedure Push (g: p2Graph; var list: p2ListItem; nod: p2Node);
{ push a node and a stack, allocating from availList }
	var temp: p2ListItem;
	begin
		if g^.AvailListItems = nil then
			MoreListItems (g);
		temp := g^.AvailListItems;
		g^.AvailListItems := temp^.NextListItem;
		with temp^ do
			begin
				ListItem := nod;
				NextListItem := list;
			end;
		list := temp;
	end; {Push}

function Pop (g: p2Graph; var stack: p2ListItem): p2Node;
	{ pop a node from a stack, return the node, place cell on availList }
	{ Pop defends itself against empty stack problems.  Returns nil. }
	var temp: p2ListItem;
	begin
		Pop := nil;
		if stack <> nil then
			begin
				temp := stack;
				stack := stack^.NextListItem;
				temp^.NextListItem := nil;
				Pop := temp^.ListItem;
				ReturnToAvailList (g, temp);
			end;
	end; {Pop}

{---------------------------------------------------
xxx Note:  Delete assumes that each node is placed on
PotentialSafe by BreadFirstSearch only once.

Delete will remove x from list, wherever it appears.
O(n) algorithm.
---------------------------------------------------}
procedure Delete(g : p2Graph; x : p2Node; var list : p2ListItem);
var temp,follow : p2ListItem;
begin
	temp := list;
	follow := nil;
	while temp <> nil do 
		begin
	       if temp^.ListItem = x then  {this is the item to delete}
				 begin
					if follow <> nil then
						follow^.NextListItem := temp^.NextListItem
					else
						list := temp^.NextListItem;
					x := Pop(g, temp);
					temp := nil;
				 end  {if ListItem = x}
			 else
				begin
					follow := temp;
					temp := temp^.NextListItem;
				end
		end;  {temp <> nil}
end;

function PushUnique (g : p2Graph; var List : p2ListItem; nod : p2Node): Boolean;
	{ if nod is not already on the List then this will Push it; }
	{ else it will do nothing. }
	{ Returns true if this call reuired nod to be added to list. }
	var tempList : p2ListItem;
	begin
		tempList := List;
		PushUnique := false;
		while tempList <> nil do
			if tempList^.ListItem = nod then
				exit (PushUnique)
			else 
				tempList := tempList^.NextListItem;
		Push(g, List, nod);
		PushUnique := true;
	end; {PushUnique}

procedure JoinStacks(var High, Low : p2ListItem);
	var tempPntr : p2ListItem;
	begin
		if High <> nil then
			begin
				tempPntr := High;
				while tempPntr^.NextListItem <> nil do
					tempPntr := tempPntr^.NextListItem;
				tempPntr^.NextListItem := Low;
			end
		else
			High := Low;
		Low := nil;
	end; {JoinStacks}

procedure PopEach (g: p2Graph; var list: p2ListItem; 
										procedure Visit (g: p2Graph; p: p2Node));
{ pop each element off a stack, Visit the node, return to availList }
	var temp: p2ListItem;
	begin
		temp := list;
		while temp <> nil do
			begin
				Visit (g, temp^.ListItem);
				list := temp^.NextListItem;
				temp^.NextListItem := nil;
				ReturnToAvailList (g, temp);
				temp := list;
			end;
	end; {PopEach}
							
procedure AddEveryOtherPoint (g : p2Graph; var PointPair, Return : p2ListItem);
	{ This procedure will remove all the points from PointPair. }
	{ Every other one, including the first, will be put onto Return. }
	var
		Dispose, temp : p2ListItem;
	begin
		Dispose := nil;
		while PointPair <> nil do 
			begin
				temp := PointPair;
				PointPair := PointPair^.NextListItem;
				temp^.NextListItem := Return;
				Return := temp;
				if PointPair = nil then 
					GOEngineError ('Trouble!  Odd number of points in AddEveryOtherPoint',
							0, 0);
				temp := PointPair;
				PointPair := PointPair^.NextListItem;
				temp^.NextListItem := Dispose;
				Dispose := temp;
			end;
		ReturnToAvailList (g, Dispose);
	end; {AddEveryOtherPoint}

{$S ADebug}
procedure WriteLev (Lev:TGraphLevel);
	begin
		case Lev of
			PointsGraphLevel:
				write(' PtG');
			StringsGraphLevel:
				write(' StrG');
			BlocksGraphLevel:
				write(' BckG');
			GroupsGraphLevel:
				write(' GrpG');
			AreasGraphLevel:
				write(' ArG');
		end; {cases}
	end; {WriteLev}
	
	{ Move Tree operators }

{$S GraphOps}
{$IFC qTrace}{$D+}{$ENDC}
procedure MoreMoveTreeNodes (g: p2Graph);
	var pChunk: ChunkList; p: p2TreeNode; i: integer;
		siz: integer;
	begin
		case g^.GraphLevel of
			PointsGraphLevel:
				siz := sizeof (TreeNode);
			StringsGraphLevel:
				siz := sizeof (JosekiTreeNode);
			BlocksGraphLevel,
			GroupsGraphLevel, 
			AreasGraphLevel:
				GraphError('Bad GraphLevel in MoreMoveTreeNodes');
			otherwise
				GraphError('Bad GraphLevel in MoreMoveTreeNodes');
		end; {case}
		pChunk := ChunkList (NewPtr (4 + ListItemChunkSize * siz));
		if pChunk = nil then
			GraphError('Memory Full');
		pChunk^.nextChunk := g^.AvailMoveTreeChunckList;
		g^.AvailMoveTreeChunckList := pChunk;
		p := p2TreeNode (ord4 (pChunk) + 4);
		for i := 1 to ListItemChunkSize do
			begin
				p^.FirstContinuation := g^.AvailMoveTreeNodes;
				g^.AvailMoveTreeNodes := p;
				p := Pointer (ord4(p) + siz);
			end;
	end; {MoreMoveTreeNodes}

procedure WritePoint (X, Y: integer);
	const
		RowLetter = 'ABCDEFGHJKLMNOPQRST';
	begin
		if x = 0 then
			write ('pass')
		else
			begin
				write (RowLetter [X], ' ');
				write (Y:1);
			end;
	end; {WritePoint}

{$IFC TraceReturnAnalysis}
const TraceReturns = true;
{$ELSEC}
const TraceReturns = false;
{$ENDC}

procedure ReturnTree (g: p2Graph; var root: p2TreeNode);
	begin
		if root <> nil then
			with g^ do
				begin
					if TraceReturns then
						begin
								write ('    Entering ReturnTree on tree with ');
								with root^ do
									WritePoint (TreeMoveX, TreeMoveY);
								writeln;
						end;
					(* optimization? Boolean tests are faster than subroutine calls *)
					if root^.NextAlternative <> nil then
						ReturnTree (g, root^.NextAlternative);
					if root^.FirstContinuation <> nil then
						ReturnTree (g, root^.FirstContinuation);
					root^.FirstContinuation := AvailMoveTreeNodes;
					AvailMoveTreeNodes := root;
					root := nil;
			end;
	end; {ReturnTree}
	
procedure Print1Tree (root : p2TreeNode);
var cont: p2TreeNode;
begin
	if root <> nil then
		begin
			if root^.FirstContinuation <> nil then
				write('(')
			else
				write(' ');
			with root^ do
				WritePoint (TreeMoveX, TreeMoveY);
			cont := root^.FirstContinuation;
			while cont <> nil do
				begin
					Print1Tree (cont);
					cont := cont^.NextAlternative;
				end;
			if root^.FirstContinuation <> nil then
				write(')');

		end;
end; {Print1Tree}
	
procedure PrintTree (root : p2TreeNode);
var alt: p2TreeNode;
begin
	if root <> nil then
		begin
			write('(');
			alt := root;
			while alt <> nil do
				begin
					Print1Tree (alt);
					alt := alt^.NextAlternative;
				end;
			write(')');
		end;
end; {PrintTree}
	

procedure AddChild (par: p2TreeNode; child: p2TreeNode);
	var
		lastChild: p2TreeNode;
	begin
		if par <> nil then
			{ xxx error to call with par = nil?? }
			with par^ do
				if FirstContinuation = nil then
					FirstContinuation := child
				else
					begin
						lastChild := FirstContinuation;
						while lastChild^.NextAlternative <> nil do
							lastChild := lastChild^.NextAlternative;
						lastChild^.NextAlternative := child;
					end;
	end; {AddChild}
	
procedure AddSibling (var FirstSibling: p2TreeNode;  NextSibling : p2TreeNode);
	{ Add a Sibling to FirstSibling }
	{ Adds at tail of list. }
	{ Handles nil FIrstSibling correctly }
	var
		lastSib: p2TreeNode;
	begin
		if FirstSibling <> nil then
			with FirstSibling^ do
				if NextAlternative = nil then
					NextAlternative := NextSibling
				else
					begin
						lastSib := NextAlternative;
						while lastSib^.NextAlternative <> nil do
							lastSib := lastSib^.NextAlternative;
						lastSib^.NextAlternative := NextSibling;
					end
			else
				FirstSibling := NextSibling;
	end; {AddSibling}

function FindChild (root: p2TreeNode; x, y: integer): p2TreeNode;
	var 
		t: p2TreeNode;
	begin
		FindChild := nil;
		if root <> nil then
			begin
				t := root^.FirstContinuation;
				while t <> nil do
					begin
						with t^ do
						if (TreeMoveX = x) and (TreeMoveY = y) then
							begin
								FindChild := t;
								t := nil;
							end
						else
							t := t^.NextAlternative;
					end;
			end;
	end; {FindChild}
	
procedure ForEachChild (root: p2TreeNode; procedure Visit (t: p2TreeNode));
	var 
		childT, nextChild: p2TreeNode;
	begin
		if root <> nil then
			begin
				childT := root^.FirstContinuation;
				while childT <> nil do
					begin
						nextChild := childT^.NextAlternative;
						Visit (childT);
						childT := nextChild;
					end;
			end;
	end; {ForEachChild}

{$IFC qTrace}{$D+}{$ENDC}
procedure MoreAnalyses (g: p2Graph);
	var pChunk: ChunkList; p: p2Analysis; i: integer;
		siz: integer;
	begin
		pChunk := ChunkList (NewPtr (4 + ListItemChunkSize * sizeof (TAnalysis)));
		if pChunk = nil then
			GraphError('Memory Full');
		pChunk^.nextChunk := g^.AnalysesChunkList;
		g^.AnalysesChunkList := pChunk;
		p := p2Analysis (ord4 (pChunk) + 4);
		for i := 1 to ListItemChunkSize do
			begin
				with p^ do
					begin
						attackTree := p2TreeNode (g^.AvailAnalyses);
						{$R-}
						targLevel := TGraphLevel(-1); { mark as free! }
						{$IFC RangeChk}
							{$R+}
						{$ELSEC}
							{$R-}
						{$ENDC}
					end; 
				g^.AvailAnalyses := p;
				p := Pointer (ord4(p) + sizeof (TAnalysis));
			end;
	end; {MoreAnalyses}

function NewAnalysis (g: p2Graph; res: integer; ATree, DTree: p2TreeNode; 
		targ: p2Node {p2GOPoint of node}; targlev: TGraphLevel): p2Analysis;
	var
		temp: p2Analysis;
	begin
		if TraceReturns then
			begin
					write ('  NewAnalysis, result ', res:1);
					if ATree = nil then
						write(' ATree: nil ')
					else
						begin
							write(' ARoot: '); 
							with Atree^ do
								WritePoint (TreeMoveX, TreeMoveY);
						end;
					if DTree = nil then
						write(' DTree: nil ')
					else 
						begin
							write(' DRoot: '); 
							with DTree^ do
								WritePoint (TreeMoveX, TreeMoveY);
						end;
					writeln;
			end;
		with g^ do
			begin
				if AvailAnalyses = nil then
					MoreAnalyses (g);
				temp := AvailAnalyses;
				AvailAnalyses := p2Analysis (AvailAnalyses^.attackTree);
			end;
		with temp^ do
			begin
				result := res;
				target := targ;
				targLevel := targlev;
				attackTree := ATree;
				defendTree:= DTree;
			end;
		NewAnalysis := temp;
	end; {NewAnalysis}
	
procedure ReturnAnalysis (g: p2Graph; var anal: p2Analysis);
	{ Return an analysis node, and its move trees, to the avail lists }
	begin
		if anal <> nil then
			with g^ do
				begin
					if TraceReturns then
						begin
								write ('  Entering ReturnAnalysis with result ', anal^.result:1);
								writeln;
						end;
					{$R-}
					if ord(anal^.targLevel) = -1 then
						begin
							{$IFC qDebug}
							GOEngineError('*** Error: Attempt free analysis on available list. ', 0, 0);
							{$ENDC}
							exit (ReturnAnalysis);
						end;
					{$IFC RangeChk}
						{$R+}
					{$ELSEC}
						{$R-}
					{$ENDC}
					ReturnTree (g, anal^.attackTree);
					if TraceReturns then
						if anal^.defendTree <> nil then
							writeln ('  Calling  ReturnTree for defendTree ');
					ReturnTree (g, anal^.defendTree);
					with anal^ do
						begin
							attackTree := p2TreeNode (AvailAnalyses);
							{$R-}
							targLevel := TGraphLevel(-1);
							{$IFC RangeChk}
								{$R+}
							{$ELSEC}
								{$R-}
							{$ENDC}
						end;
					AvailAnalyses := anal;
					anal := nil;
				end;
	end; {ReturnAnalysis}
